<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA知识 on unclesky4 BLOG</title>
    <link>https://unclesky4.github.io/java/</link>
    <description>Recent content in JAVA知识 on unclesky4 BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Sep 2018 17:33:54 +0800</lastBuildDate>
    
	<atom:link href="https://unclesky4.github.io/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java位运算</title>
      <link>https://unclesky4.github.io/java/java%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 09 Sep 2018 17:33:54 +0800</pubDate>
      
      <guid>https://unclesky4.github.io/java/java%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>1. 判断int型变量a是奇数还是偶数 a&amp;amp;1 = 0 偶数 a&amp;amp;1 = 1 奇数 2. 求平均值，比如有两个int类型变量x、y,首先要求x+y的和，再除以2，但是有可能x+y的结果会超过int的最大表示范围，所以位运算就派上用场啦。 (x&amp;amp;y)+((x^y)&amp;gt;&amp;gt;1); 3. 对于一个大于0的整数，判断它是不是2的几次方 ((x&amp;amp;(x-1))==0)&amp;amp;&amp;amp;(x!=0)； 4. 比如有两个int类型变量x、y,要求两者数字交换，位运算的实现方法：性能绝对高效 x ^= y; y ^= x; x ^= y; 5. 求绝对值 int abs( int x ) { int y ; y = x &amp;gt;&amp;gt; 31 ; return (x^y)-y ; //or: (x+y)^y } 6. 取模运算，采用位运算实现： a % (2^n) 等价于 a &amp;amp; (2^n - 1) 7. 乘法运算 采用位运算实现 a * (2^n) 等价于 a &amp;lt;&amp;lt; n 8.</description>
    </item>
    
    <item>
      <title>JsonConfig的使用</title>
      <link>https://unclesky4.github.io/java/jsonconfig%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 09 Sep 2018 17:24:37 +0800</pubDate>
      
      <guid>https://unclesky4.github.io/java/jsonconfig%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>我们通常对一个Json串和Java对象进行互转时，经常会有选择性的过滤掉一些属性值，而json-lib包中的JsonConfig为我们提供了这种 功能，具体实现方法有以下几种。(1)建立JsonConfig实例，并配置属性排除列表,(2)用属性过滤器,(3)写一个自定义的 JsonBeanProcessor. 1. 实现JSONString接口的方法 public class Person implements JSONString { private String name; private String lastname; private Address address; // getters &amp;amp; setters public String toJSONString() { return &amp;quot;{name:&#39;&amp;quot;+name+&amp;quot;&#39;,lastname:&#39;&amp;quot;+lastname+&amp;quot;&#39;}&amp;quot;; } } 2.第二种方法通过jsonconfig实例，对包含和需要排除的属性进行方便的添加或删除 public class Person { private String name; private String lastname; private Address address; // getters &amp;amp; setters } JsonConfig jsonConfig = new JsonConfig(); jsonConfig.setExclusions( new String[]{&amp;quot;address&amp;quot;}); Person bean = new Person(&amp;quot;jack&amp;quot;,&amp;quot;li&amp;quot;); JSON json = JSONSerializer.toJSON(bean, jsonConfig); 3.</description>
    </item>
    
  </channel>
</rss>